--- ./src/main/java/com/jezhumble/javasysmon/LinuxMonitor.java.orig	2013-03-19 21:50:30.000000000 -0600
+++ ./src/main/java/com/jezhumble/javasysmon/LinuxMonitor.java	2013-11-05 21:15:00.000000000 -0700
@@ -3,7 +3,6 @@ package com.jezhumble.javasysmon;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Method;
-import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -28,7 +27,7 @@ class LinuxMonitor implements Monitor {
     private static final Pattern NUM_CPU_PATTERN =
             Pattern.compile("processor\\s+:\\s+(\\d+)", Pattern.MULTILINE);
     private static final Pattern CPU_FREQ_PATTERN =
-            Pattern.compile("model name[^@]*@\\s+([0-9.A-Za-z]*)", Pattern.MULTILINE);
+            Pattern.compile("cpu MHz\\s+:\\s+([0-9.]*)", Pattern.MULTILINE);
     private static final Pattern UPTIME_PATTERN =
             Pattern.compile("([\\d]*).*");
     private static final Pattern PID_PATTERN =
@@ -98,10 +97,8 @@ class LinuxMonitor implements Monitor {
 
     public long cpuFrequencyInHz() {
         String cpuFrequencyAsString = fileUtils.runRegexOnFile(CPU_FREQ_PATTERN, "/proc/cpuinfo");
-        int strLen = cpuFrequencyAsString.length();
-        BigDecimal cpuFrequency = new BigDecimal(cpuFrequencyAsString.substring(0, strLen - 3));
-        long multiplier = getMultiplier(cpuFrequencyAsString.charAt(strLen - 3));
-        return cpuFrequency.multiply(new BigDecimal(Long.toString(multiplier))).longValue();
+        double mhz = Double.parseDouble(cpuFrequencyAsString);
+	return (long)(mhz * 1000000.0);
     }
 
     public long uptimeInSeconds() {
@@ -157,18 +154,6 @@ class LinuxMonitor implements Monitor {
         }
     }
 
-    private long getMultiplier(char multiplier) {
-        switch (multiplier) {
-            case 'G':
-                return 1000000000;
-            case 'M':
-                return 1000000;
-            case 'k':
-                return 1000;
-        }
-        return 0;
-    }
-
     private long toMillis(long jiffies) {
         int multiplier = 1000 / userHz;
         return jiffies * multiplier;
--- ./src/test/java/com/jezhumble/javasysmon/LinuxMonitorTest.java.orig	2013-03-19 21:50:30.000000000 -0600
+++ ./src/test/java/com/jezhumble/javasysmon/LinuxMonitorTest.java	2013-11-06 12:00:00.000000000 -0700
@@ -38,7 +38,7 @@ public class LinuxMonitorTest extends Te
     public void testShouldCalculateCpuFrequency() {
         LinuxMonitor monitor = new LinuxMonitor(new StubFileUtils());
         final long cpuFrequency = monitor.cpuFrequencyInHz();
-        Assert.assertEquals(2400000000l, cpuFrequency);
+        Assert.assertEquals(598516000l, cpuFrequency);
     }
 
     public void testShouldReturnUptime() {
